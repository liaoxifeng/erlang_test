%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.6.0
-module(all_pb).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_EnumS2CErrShowType/1, enum_value_by_symbol_EnumS2CErrShowType/1]).
-export([enum_symbol_by_value_EnumS2CErrCode/1, enum_value_by_symbol_EnumS2CErrCode/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([descriptor/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("all_pb.hrl").
-include_lib("gpb/include/gpb.hrl").

%% enumerated types
-type 'EnumS2CErrShowType'() :: 'E_S2CErrShowType_PopUp'.
-type 'EnumS2CErrCode'() :: 'E_S2CErrCode_Succ' | 'E_S2CErrCode_Sys' | 'E_S2CErrCode_Busy' | 'E_S2CErrCode_OpToFrequency' | 'E_S2CErrCode_ReLogin' | 'E_S2CErrCode_NotLogin' | 'E_S2CErrCode_LoginCheckTimeout' | 'E_S2CErrCode_LoginCheckNotThrough' | 'E_S2CErrCode_ErrArgs' | 'E_S2CErrCode_ProtoErr' | 'E_S2CErrCode_BeKicked' | 'E_S2CErrCode_Gs_Maintenance' | 'E_S2CErrCode_NotEnoughMoney' | 'E_S2CErrCode_RoomNotExist' | 'E_S2CErrCode_NotInRoom' | 'E_S2CErrCode_OutOfLimit' | 'E_S2CErrCode_CanNotBet'.
-export_type(['EnumS2CErrShowType'/0, 'EnumS2CErrCode'/0]).

%% message types
-type 'Person'() :: #'Person'{}.

-type 'Struct_Num'() :: #'Struct_Num'{}.

-type 'C2S_Heartbeat'() :: #'C2S_Heartbeat'{}.

-type 'S2C_Heartbeat'() :: #'S2C_Heartbeat'{}.

-type 'C2S_Register'() :: #'C2S_Register'{}.

-type 'S2C_Register'() :: #'S2C_Register'{}.

-type 'C2S_Login'() :: #'C2S_Login'{}.

-type 'S2C_Login'() :: #'S2C_Login'{}.

-type 'S2C_Err'() :: #'S2C_Err'{}.

-export_type(['Person'/0, 'Struct_Num'/0, 'C2S_Heartbeat'/0, 'S2C_Heartbeat'/0, 'C2S_Register'/0, 'S2C_Register'/0, 'C2S_Login'/0, 'S2C_Login'/0, 'S2C_Err'/0]).

-spec encode_msg(#'Person'{} | #'Struct_Num'{} | #'C2S_Heartbeat'{} | #'S2C_Heartbeat'{} | #'C2S_Register'{} | #'S2C_Register'{} | #'C2S_Login'{} | #'S2C_Login'{} | #'S2C_Err'{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#'Person'{} | #'Struct_Num'{} | #'C2S_Heartbeat'{} | #'S2C_Heartbeat'{} | #'C2S_Register'{} | #'S2C_Register'{} | #'C2S_Login'{} | #'S2C_Login'{} | #'S2C_Err'{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#'Person'{} | #'Struct_Num'{} | #'C2S_Heartbeat'{} | #'S2C_Heartbeat'{} | #'C2S_Register'{} | #'S2C_Register'{} | #'C2S_Login'{} | #'S2C_Login'{} | #'S2C_Err'{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Person' ->
	  encode_msg_Person(id(Msg, TrUserData), TrUserData);
      'Struct_Num' ->
	  encode_msg_Struct_Num(id(Msg, TrUserData), TrUserData);
      'C2S_Heartbeat' ->
	  encode_msg_C2S_Heartbeat(id(Msg, TrUserData),
				   TrUserData);
      'S2C_Heartbeat' ->
	  encode_msg_S2C_Heartbeat(id(Msg, TrUserData),
				   TrUserData);
      'C2S_Register' ->
	  encode_msg_C2S_Register(id(Msg, TrUserData),
				  TrUserData);
      'S2C_Register' ->
	  encode_msg_S2C_Register(id(Msg, TrUserData),
				  TrUserData);
      'C2S_Login' ->
	  encode_msg_C2S_Login(id(Msg, TrUserData), TrUserData);
      'S2C_Login' ->
	  encode_msg_S2C_Login(id(Msg, TrUserData), TrUserData);
      'S2C_Err' ->
	  encode_msg_S2C_Err(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_Person(Msg, TrUserData) ->
    encode_msg_Person(Msg, <<>>, TrUserData).


encode_msg_Person(#'Person'{name = F1, id = F2,
			    nums = F3, email = F4},
		  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   if TrF3 == [] -> B2;
	      true -> e_field_Person_nums(TrF3, B2, TrUserData)
	   end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
	   end
    end.

encode_msg_Struct_Num(Msg, TrUserData) ->
    encode_msg_Struct_Num(Msg, <<>>, TrUserData).


encode_msg_Struct_Num(#'Struct_Num'{num = F1}, Bin,
		      TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_C2S_Heartbeat(_Msg, _TrUserData) -> <<>>.

encode_msg_S2C_Heartbeat(_Msg, _TrUserData) -> <<>>.

encode_msg_C2S_Register(Msg, TrUserData) ->
    encode_msg_C2S_Register(Msg, <<>>, TrUserData).


encode_msg_C2S_Register(#'C2S_Register'{use_name = F1,
					password = F2, phone_number = F3},
			Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
    end.

encode_msg_S2C_Register(Msg, TrUserData) ->
    encode_msg_S2C_Register(Msg, <<>>, TrUserData).


encode_msg_S2C_Register(#'S2C_Register'{code = F1}, Bin,
			TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_C2S_Login(Msg, TrUserData) ->
    encode_msg_C2S_Login(Msg, <<>>, TrUserData).


encode_msg_C2S_Login(#'C2S_Login'{use_name = F1,
				  password = F2},
		     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

encode_msg_S2C_Login(Msg, TrUserData) ->
    encode_msg_S2C_Login(Msg, <<>>, TrUserData).


encode_msg_S2C_Login(#'S2C_Login'{use_name = F1,
				  money = F2},
		     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_S2C_Err(Msg, TrUserData) ->
    encode_msg_S2C_Err(Msg, <<>>, TrUserData).


encode_msg_S2C_Err(#'S2C_Err'{code = F1, msg = F2}, Bin,
		   TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_enum_EnumS2CErrCode(TrF1, <<Bin/binary, 8>>,
				 TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 26>>, TrUserData)
    end.

e_mfield_Person_nums(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Struct_Num(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Person_nums([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_Person_nums(id(Elem, TrUserData), Bin2,
				TrUserData),
    e_field_Person_nums(Rest, Bin3, TrUserData);
e_field_Person_nums([], Bin, _TrUserData) -> Bin.

e_enum_EnumS2CErrCode('E_S2CErrCode_Succ', Bin,
		      _TrUserData) ->
    <<Bin/binary, 0>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_Sys', Bin,
		      _TrUserData) ->
    <<Bin/binary, 1>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_Busy', Bin,
		      _TrUserData) ->
    <<Bin/binary, 2>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_OpToFrequency', Bin,
		      _TrUserData) ->
    <<Bin/binary, 3>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_ReLogin', Bin,
		      _TrUserData) ->
    <<Bin/binary, 4>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_NotLogin', Bin,
		      _TrUserData) ->
    <<Bin/binary, 5>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_LoginCheckTimeout',
		      Bin, _TrUserData) ->
    <<Bin/binary, 6>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_LoginCheckNotThrough',
		      Bin, _TrUserData) ->
    <<Bin/binary, 7>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_ErrArgs', Bin,
		      _TrUserData) ->
    <<Bin/binary, 8>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_ProtoErr', Bin,
		      _TrUserData) ->
    <<Bin/binary, 9>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_BeKicked', Bin,
		      _TrUserData) ->
    <<Bin/binary, 11>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_Gs_Maintenance',
		      Bin, _TrUserData) ->
    <<Bin/binary, 12>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_NotEnoughMoney',
		      Bin, _TrUserData) ->
    <<Bin/binary, 100>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_RoomNotExist', Bin,
		      _TrUserData) ->
    <<Bin/binary, 101>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_NotInRoom', Bin,
		      _TrUserData) ->
    <<Bin/binary, 102>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_OutOfLimit', Bin,
		      _TrUserData) ->
    <<Bin/binary, 103>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_CanNotBet', Bin,
		      _TrUserData) ->
    <<Bin/binary, 104>>;
e_enum_EnumS2CErrCode(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('Person', Bin, TrUserData) ->
    id(decode_msg_Person(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Struct_Num', Bin, TrUserData) ->
    id(decode_msg_Struct_Num(Bin, TrUserData), TrUserData);
decode_msg_2_doit('C2S_Heartbeat', Bin, TrUserData) ->
    id(decode_msg_C2S_Heartbeat(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('S2C_Heartbeat', Bin, TrUserData) ->
    id(decode_msg_S2C_Heartbeat(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('C2S_Register', Bin, TrUserData) ->
    id(decode_msg_C2S_Register(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('S2C_Register', Bin, TrUserData) ->
    id(decode_msg_S2C_Register(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('C2S_Login', Bin, TrUserData) ->
    id(decode_msg_C2S_Login(Bin, TrUserData), TrUserData);
decode_msg_2_doit('S2C_Login', Bin, TrUserData) ->
    id(decode_msg_S2C_Login(Bin, TrUserData), TrUserData);
decode_msg_2_doit('S2C_Err', Bin, TrUserData) ->
    id(decode_msg_S2C_Err(Bin, TrUserData), TrUserData).



decode_msg_Person(Bin, TrUserData) ->
    dfp_read_field_def_Person(Bin, 0, 0,
			      id(undefined, TrUserData),
			      id(undefined, TrUserData), id([], TrUserData),
			      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Person(<<10, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Person_name(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, TrUserData);
dfp_read_field_def_Person(<<16, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Person_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		      TrUserData);
dfp_read_field_def_Person(<<26, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Person_nums(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, TrUserData);
dfp_read_field_def_Person(<<34, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Person_email(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, TrUserData);
dfp_read_field_def_Person(<<>>, 0, 0, F@_1, F@_2, R1,
			  F@_4, TrUserData) ->
    #'Person'{name = F@_1, id = F@_2,
	      nums = lists_reverse(R1, TrUserData), email = F@_4};
dfp_read_field_def_Person(Other, Z1, Z2, F@_1, F@_2,
			  F@_3, F@_4, TrUserData) ->
    dg_read_field_def_Person(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, TrUserData).

dg_read_field_def_Person(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Person(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_Person(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Person_name(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      TrUserData);
      16 ->
	  d_field_Person_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			    TrUserData);
      26 ->
	  d_field_Person_nums(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      TrUserData);
      34 ->
	  d_field_Person_email(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Person(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   TrUserData);
	    1 ->
		skip_64_Person(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       TrUserData);
	    2 ->
		skip_length_delimited_Person(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_Person(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				  F@_4, TrUserData);
	    5 ->
		skip_32_Person(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       TrUserData)
	  end
    end;
dg_read_field_def_Person(<<>>, 0, 0, F@_1, F@_2, R1,
			 F@_4, TrUserData) ->
    #'Person'{name = F@_1, id = F@_2,
	      nums = lists_reverse(R1, TrUserData), email = F@_4}.

d_field_Person_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Person_name(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, TrUserData);
d_field_Person_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_Person(RestF, 0, 0, NewFValue, F@_2,
			      F@_3, F@_4, TrUserData).

d_field_Person_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Person_id(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, F@_3, F@_4, TrUserData);
d_field_Person_id(<<0:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_Person(RestF, 0, 0, F@_1, NewFValue,
			      F@_3, F@_4, TrUserData).

d_field_Person_nums(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Person_nums(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, TrUserData);
d_field_Person_nums(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, Prev, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Struct_Num(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Person(RestF, 0, 0, F@_1, F@_2,
			      cons(NewFValue, Prev, TrUserData), F@_4,
			      TrUserData).

d_field_Person_email(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Person_email(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, TrUserData);
d_field_Person_email(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_Person(RestF, 0, 0, F@_1, F@_2, F@_3,
			      NewFValue, TrUserData).

skip_varint_Person(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_Person(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       TrUserData);
skip_varint_Person(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_Person(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData).

skip_length_delimited_Person(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_Person(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_Person(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Person(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, TrUserData).

skip_group_Person(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Person(Rest, 0, Z2, F@_1, F@_2, F@_3,
			      F@_4, TrUserData).

skip_32_Person(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_Person(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData).

skip_64_Person(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_Person(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData).

decode_msg_Struct_Num(Bin, TrUserData) ->
    dfp_read_field_def_Struct_Num(Bin, 0, 0,
				  id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Struct_Num(<<8, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_Struct_Num_num(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Struct_Num(<<>>, 0, 0, F@_1, _) ->
    #'Struct_Num'{num = F@_1};
dfp_read_field_def_Struct_Num(Other, Z1, Z2, F@_1,
			      TrUserData) ->
    dg_read_field_def_Struct_Num(Other, Z1, Z2, F@_1,
				 TrUserData).

dg_read_field_def_Struct_Num(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Struct_Num(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
dg_read_field_def_Struct_Num(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Struct_Num_num(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Struct_Num(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_Struct_Num(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_Struct_Num(Rest, 0, 0, F@_1,
						 TrUserData);
	    3 ->
		skip_group_Struct_Num(Rest, Key bsr 3, 0, F@_1,
				      TrUserData);
	    5 -> skip_32_Struct_Num(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_Struct_Num(<<>>, 0, 0, F@_1, _) ->
    #'Struct_Num'{num = F@_1}.

d_field_Struct_Num_num(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Struct_Num_num(Rest, N + 7, X bsl N + Acc, F@_1,
			   TrUserData);
d_field_Struct_Num_num(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_Struct_Num(RestF, 0, 0, NewFValue,
				  TrUserData).

skip_varint_Struct_Num(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    skip_varint_Struct_Num(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_Struct_Num(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    dfp_read_field_def_Struct_Num(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_length_delimited_Struct_Num(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Struct_Num(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_Struct_Num(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Struct_Num(Rest2, 0, 0, F@_1,
				  TrUserData).

skip_group_Struct_Num(Bin, FNum, Z2, F@_1,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Struct_Num(Rest, 0, Z2, F@_1,
				  TrUserData).

skip_32_Struct_Num(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_Struct_Num(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_64_Struct_Num(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_Struct_Num(Rest, Z1, Z2, F@_1,
				  TrUserData).

decode_msg_C2S_Heartbeat(Bin, TrUserData) ->
    dfp_read_field_def_C2S_Heartbeat(Bin, 0, 0, TrUserData).

dfp_read_field_def_C2S_Heartbeat(<<>>, 0, 0, _) ->
    #'C2S_Heartbeat'{};
dfp_read_field_def_C2S_Heartbeat(Other, Z1, Z2,
				 TrUserData) ->
    dg_read_field_def_C2S_Heartbeat(Other, Z1, Z2,
				    TrUserData).

dg_read_field_def_C2S_Heartbeat(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_C2S_Heartbeat(Rest, N + 7,
				    X bsl N + Acc, TrUserData);
dg_read_field_def_C2S_Heartbeat(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_C2S_Heartbeat(Rest, 0, 0, TrUserData);
      1 -> skip_64_C2S_Heartbeat(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_C2S_Heartbeat(Rest, 0, 0,
					      TrUserData);
      3 ->
	  skip_group_C2S_Heartbeat(Rest, Key bsr 3, 0,
				   TrUserData);
      5 -> skip_32_C2S_Heartbeat(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_C2S_Heartbeat(<<>>, 0, 0, _) ->
    #'C2S_Heartbeat'{}.

skip_varint_C2S_Heartbeat(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    skip_varint_C2S_Heartbeat(Rest, Z1, Z2, TrUserData);
skip_varint_C2S_Heartbeat(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    dfp_read_field_def_C2S_Heartbeat(Rest, Z1, Z2,
				     TrUserData).

skip_length_delimited_C2S_Heartbeat(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_C2S_Heartbeat(Rest, N + 7,
					X bsl N + Acc, TrUserData);
skip_length_delimited_C2S_Heartbeat(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_C2S_Heartbeat(Rest2, 0, 0,
				     TrUserData).

skip_group_C2S_Heartbeat(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_C2S_Heartbeat(Rest, 0, Z2,
				     TrUserData).

skip_32_C2S_Heartbeat(<<_:32, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_C2S_Heartbeat(Rest, Z1, Z2,
				     TrUserData).

skip_64_C2S_Heartbeat(<<_:64, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_C2S_Heartbeat(Rest, Z1, Z2,
				     TrUserData).

decode_msg_S2C_Heartbeat(Bin, TrUserData) ->
    dfp_read_field_def_S2C_Heartbeat(Bin, 0, 0, TrUserData).

dfp_read_field_def_S2C_Heartbeat(<<>>, 0, 0, _) ->
    #'S2C_Heartbeat'{};
dfp_read_field_def_S2C_Heartbeat(Other, Z1, Z2,
				 TrUserData) ->
    dg_read_field_def_S2C_Heartbeat(Other, Z1, Z2,
				    TrUserData).

dg_read_field_def_S2C_Heartbeat(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_Heartbeat(Rest, N + 7,
				    X bsl N + Acc, TrUserData);
dg_read_field_def_S2C_Heartbeat(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_S2C_Heartbeat(Rest, 0, 0, TrUserData);
      1 -> skip_64_S2C_Heartbeat(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_S2C_Heartbeat(Rest, 0, 0,
					      TrUserData);
      3 ->
	  skip_group_S2C_Heartbeat(Rest, Key bsr 3, 0,
				   TrUserData);
      5 -> skip_32_S2C_Heartbeat(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_S2C_Heartbeat(<<>>, 0, 0, _) ->
    #'S2C_Heartbeat'{}.

skip_varint_S2C_Heartbeat(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    skip_varint_S2C_Heartbeat(Rest, Z1, Z2, TrUserData);
skip_varint_S2C_Heartbeat(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    dfp_read_field_def_S2C_Heartbeat(Rest, Z1, Z2,
				     TrUserData).

skip_length_delimited_S2C_Heartbeat(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_Heartbeat(Rest, N + 7,
					X bsl N + Acc, TrUserData);
skip_length_delimited_S2C_Heartbeat(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_Heartbeat(Rest2, 0, 0,
				     TrUserData).

skip_group_S2C_Heartbeat(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_Heartbeat(Rest, 0, Z2,
				     TrUserData).

skip_32_S2C_Heartbeat(<<_:32, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_S2C_Heartbeat(Rest, Z1, Z2,
				     TrUserData).

skip_64_S2C_Heartbeat(<<_:64, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_S2C_Heartbeat(Rest, Z1, Z2,
				     TrUserData).

decode_msg_C2S_Register(Bin, TrUserData) ->
    dfp_read_field_def_C2S_Register(Bin, 0, 0,
				    id(undefined, TrUserData),
				    id(undefined, TrUserData),
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_C2S_Register(<<10, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_C2S_Register_use_name(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
dfp_read_field_def_C2S_Register(<<18, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_C2S_Register_password(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
dfp_read_field_def_C2S_Register(<<26, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_C2S_Register_phone_number(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData);
dfp_read_field_def_C2S_Register(<<>>, 0, 0, F@_1, F@_2,
				F@_3, _) ->
    #'C2S_Register'{use_name = F@_1, password = F@_2,
		    phone_number = F@_3};
dfp_read_field_def_C2S_Register(Other, Z1, Z2, F@_1,
				F@_2, F@_3, TrUserData) ->
    dg_read_field_def_C2S_Register(Other, Z1, Z2, F@_1,
				   F@_2, F@_3, TrUserData).

dg_read_field_def_C2S_Register(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_C2S_Register(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_C2S_Register(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_C2S_Register_use_name(Rest, 0, 0, F@_1, F@_2,
					F@_3, TrUserData);
      18 ->
	  d_field_C2S_Register_password(Rest, 0, 0, F@_1, F@_2,
					F@_3, TrUserData);
      26 ->
	  d_field_C2S_Register_phone_number(Rest, 0, 0, F@_1,
					    F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_C2S_Register(Rest, 0, 0, F@_1, F@_2, F@_3,
					 TrUserData);
	    1 ->
		skip_64_C2S_Register(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
	    2 ->
		skip_length_delimited_C2S_Register(Rest, 0, 0, F@_1,
						   F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_C2S_Register(Rest, Key bsr 3, 0, F@_1, F@_2,
					F@_3, TrUserData);
	    5 ->
		skip_32_C2S_Register(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData)
	  end
    end;
dg_read_field_def_C2S_Register(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, _) ->
    #'C2S_Register'{use_name = F@_1, password = F@_2,
		    phone_number = F@_3}.

d_field_C2S_Register_use_name(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_C2S_Register_use_name(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_C2S_Register_use_name(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_C2S_Register(RestF, 0, 0, NewFValue,
				    F@_2, F@_3, TrUserData).

d_field_C2S_Register_password(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_C2S_Register_password(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_C2S_Register_password(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_C2S_Register(RestF, 0, 0, F@_1,
				    NewFValue, F@_3, TrUserData).

d_field_C2S_Register_phone_number(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_C2S_Register_phone_number(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3,
				      TrUserData);
d_field_C2S_Register_phone_number(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_C2S_Register(RestF, 0, 0, F@_1, F@_2,
				    NewFValue, TrUserData).

skip_varint_C2S_Register(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_C2S_Register(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData);
skip_varint_C2S_Register(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_C2S_Register(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

skip_length_delimited_C2S_Register(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_C2S_Register(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3,
				       TrUserData);
skip_length_delimited_C2S_Register(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_C2S_Register(Rest2, 0, 0, F@_1, F@_2,
				    F@_3, TrUserData).

skip_group_C2S_Register(Bin, FNum, Z2, F@_1, F@_2, F@_3,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_C2S_Register(Rest, 0, Z2, F@_1, F@_2,
				    F@_3, TrUserData).

skip_32_C2S_Register(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_C2S_Register(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

skip_64_C2S_Register(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_C2S_Register(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

decode_msg_S2C_Register(Bin, TrUserData) ->
    dfp_read_field_def_S2C_Register(Bin, 0, 0,
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_S2C_Register(<<8, Rest/binary>>, Z1,
				Z2, F@_1, TrUserData) ->
    d_field_S2C_Register_code(Rest, Z1, Z2, F@_1,
			      TrUserData);
dfp_read_field_def_S2C_Register(<<>>, 0, 0, F@_1, _) ->
    #'S2C_Register'{code = F@_1};
dfp_read_field_def_S2C_Register(Other, Z1, Z2, F@_1,
				TrUserData) ->
    dg_read_field_def_S2C_Register(Other, Z1, Z2, F@_1,
				   TrUserData).

dg_read_field_def_S2C_Register(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_Register(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_S2C_Register(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_S2C_Register_code(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_S2C_Register(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_S2C_Register(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_S2C_Register(Rest, 0, 0, F@_1,
						   TrUserData);
	    3 ->
		skip_group_S2C_Register(Rest, Key bsr 3, 0, F@_1,
					TrUserData);
	    5 -> skip_32_S2C_Register(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_S2C_Register(<<>>, 0, 0, F@_1, _) ->
    #'S2C_Register'{code = F@_1}.

d_field_S2C_Register_code(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_S2C_Register_code(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
d_field_S2C_Register_code(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_S2C_Register(RestF, 0, 0, NewFValue,
				    TrUserData).

skip_varint_S2C_Register(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    skip_varint_S2C_Register(Rest, Z1, Z2, F@_1,
			     TrUserData);
skip_varint_S2C_Register(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    dfp_read_field_def_S2C_Register(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_length_delimited_S2C_Register(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_Register(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_S2C_Register(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_Register(Rest2, 0, 0, F@_1,
				    TrUserData).

skip_group_S2C_Register(Bin, FNum, Z2, F@_1,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_Register(Rest, 0, Z2, F@_1,
				    TrUserData).

skip_32_S2C_Register(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_S2C_Register(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_64_S2C_Register(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_S2C_Register(Rest, Z1, Z2, F@_1,
				    TrUserData).

decode_msg_C2S_Login(Bin, TrUserData) ->
    dfp_read_field_def_C2S_Login(Bin, 0, 0,
				 id(undefined, TrUserData),
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_C2S_Login(<<10, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_C2S_Login_use_name(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_C2S_Login(<<18, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_C2S_Login_password(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_C2S_Login(<<>>, 0, 0, F@_1, F@_2,
			     _) ->
    #'C2S_Login'{use_name = F@_1, password = F@_2};
dfp_read_field_def_C2S_Login(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData) ->
    dg_read_field_def_C2S_Login(Other, Z1, Z2, F@_1, F@_2,
				TrUserData).

dg_read_field_def_C2S_Login(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_C2S_Login(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
dg_read_field_def_C2S_Login(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_C2S_Login_use_name(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      18 ->
	  d_field_C2S_Login_password(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_C2S_Login(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    1 ->
		skip_64_C2S_Login(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_C2S_Login(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    3 ->
		skip_group_C2S_Login(Rest, Key bsr 3, 0, F@_1, F@_2,
				     TrUserData);
	    5 ->
		skip_32_C2S_Login(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_C2S_Login(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #'C2S_Login'{use_name = F@_1, password = F@_2}.

d_field_C2S_Login_use_name(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_C2S_Login_use_name(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_C2S_Login_use_name(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_C2S_Login(RestF, 0, 0, NewFValue,
				 F@_2, TrUserData).

d_field_C2S_Login_password(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_C2S_Login_password(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_C2S_Login_password(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_C2S_Login(RestF, 0, 0, F@_1,
				 NewFValue, TrUserData).

skip_varint_C2S_Login(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    skip_varint_C2S_Login(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
skip_varint_C2S_Login(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_C2S_Login(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_length_delimited_C2S_Login(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_C2S_Login(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_C2S_Login(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_C2S_Login(Rest2, 0, 0, F@_1, F@_2,
				 TrUserData).

skip_group_C2S_Login(Bin, FNum, Z2, F@_1, F@_2,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_C2S_Login(Rest, 0, Z2, F@_1, F@_2,
				 TrUserData).

skip_32_C2S_Login(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_C2S_Login(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_64_C2S_Login(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_C2S_Login(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

decode_msg_S2C_Login(Bin, TrUserData) ->
    dfp_read_field_def_S2C_Login(Bin, 0, 0,
				 id(undefined, TrUserData),
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_S2C_Login(<<10, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_S2C_Login_use_name(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_S2C_Login(<<16, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_S2C_Login_money(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_S2C_Login(<<>>, 0, 0, F@_1, F@_2,
			     _) ->
    #'S2C_Login'{use_name = F@_1, money = F@_2};
dfp_read_field_def_S2C_Login(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData) ->
    dg_read_field_def_S2C_Login(Other, Z1, Z2, F@_1, F@_2,
				TrUserData).

dg_read_field_def_S2C_Login(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_Login(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
dg_read_field_def_S2C_Login(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_S2C_Login_use_name(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      16 ->
	  d_field_S2C_Login_money(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_S2C_Login(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    1 ->
		skip_64_S2C_Login(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_S2C_Login(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    3 ->
		skip_group_S2C_Login(Rest, Key bsr 3, 0, F@_1, F@_2,
				     TrUserData);
	    5 ->
		skip_32_S2C_Login(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_S2C_Login(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #'S2C_Login'{use_name = F@_1, money = F@_2}.

d_field_S2C_Login_use_name(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_S2C_Login_use_name(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_S2C_Login_use_name(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_S2C_Login(RestF, 0, 0, NewFValue,
				 F@_2, TrUserData).

d_field_S2C_Login_money(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_S2C_Login_money(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_S2C_Login_money(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_S2C_Login(RestF, 0, 0, F@_1,
				 NewFValue, TrUserData).

skip_varint_S2C_Login(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    skip_varint_S2C_Login(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
skip_varint_S2C_Login(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_S2C_Login(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_length_delimited_S2C_Login(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_Login(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_S2C_Login(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_Login(Rest2, 0, 0, F@_1, F@_2,
				 TrUserData).

skip_group_S2C_Login(Bin, FNum, Z2, F@_1, F@_2,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_Login(Rest, 0, Z2, F@_1, F@_2,
				 TrUserData).

skip_32_S2C_Login(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_S2C_Login(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_64_S2C_Login(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_S2C_Login(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

decode_msg_S2C_Err(Bin, TrUserData) ->
    dfp_read_field_def_S2C_Err(Bin, 0, 0,
			       id(undefined, TrUserData),
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_S2C_Err(<<8, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, TrUserData) ->
    d_field_S2C_Err_code(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
dfp_read_field_def_S2C_Err(<<26, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, TrUserData) ->
    d_field_S2C_Err_msg(Rest, Z1, Z2, F@_1, F@_2,
			TrUserData);
dfp_read_field_def_S2C_Err(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'S2C_Err'{code = F@_1, msg = F@_2};
dfp_read_field_def_S2C_Err(Other, Z1, Z2, F@_1, F@_2,
			   TrUserData) ->
    dg_read_field_def_S2C_Err(Other, Z1, Z2, F@_1, F@_2,
			      TrUserData).

dg_read_field_def_S2C_Err(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_Err(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
dg_read_field_def_S2C_Err(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_S2C_Err_code(Rest, 0, 0, F@_1, F@_2,
			       TrUserData);
      26 ->
	  d_field_S2C_Err_msg(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_S2C_Err(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 ->
		skip_64_S2C_Err(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_S2C_Err(Rest, 0, 0, F@_1, F@_2,
					      TrUserData);
	    3 ->
		skip_group_S2C_Err(Rest, Key bsr 3, 0, F@_1, F@_2,
				   TrUserData);
	    5 -> skip_32_S2C_Err(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_S2C_Err(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'S2C_Err'{code = F@_1, msg = F@_2}.

d_field_S2C_Err_code(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_S2C_Err_code(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, TrUserData);
d_field_S2C_Err_code(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_EnumS2CErrCode(begin
						     <<Res:32/signed-native>> =
							 <<(X bsl N +
							      Acc):32/unsigned-native>>,
						     id(Res, TrUserData)
						   end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_S2C_Err(RestF, 0, 0, NewFValue, F@_2,
			       TrUserData).

d_field_S2C_Err_msg(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_S2C_Err_msg(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, TrUserData);
d_field_S2C_Err_msg(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_S2C_Err(RestF, 0, 0, F@_1, NewFValue,
			       TrUserData).

skip_varint_S2C_Err(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, TrUserData) ->
    skip_varint_S2C_Err(Rest, Z1, Z2, F@_1, F@_2,
			TrUserData);
skip_varint_S2C_Err(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_S2C_Err(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

skip_length_delimited_S2C_Err(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_Err(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_S2C_Err(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_Err(Rest2, 0, 0, F@_1, F@_2,
			       TrUserData).

skip_group_S2C_Err(Bin, FNum, Z2, F@_1, F@_2,
		   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_Err(Rest, 0, Z2, F@_1, F@_2,
			       TrUserData).

skip_32_S2C_Err(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    dfp_read_field_def_S2C_Err(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

skip_64_S2C_Err(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    dfp_read_field_def_S2C_Err(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

d_enum_EnumS2CErrCode(0) -> 'E_S2CErrCode_Succ';
d_enum_EnumS2CErrCode(1) -> 'E_S2CErrCode_Sys';
d_enum_EnumS2CErrCode(2) -> 'E_S2CErrCode_Busy';
d_enum_EnumS2CErrCode(3) ->
    'E_S2CErrCode_OpToFrequency';
d_enum_EnumS2CErrCode(4) -> 'E_S2CErrCode_ReLogin';
d_enum_EnumS2CErrCode(5) -> 'E_S2CErrCode_NotLogin';
d_enum_EnumS2CErrCode(6) ->
    'E_S2CErrCode_LoginCheckTimeout';
d_enum_EnumS2CErrCode(7) ->
    'E_S2CErrCode_LoginCheckNotThrough';
d_enum_EnumS2CErrCode(8) -> 'E_S2CErrCode_ErrArgs';
d_enum_EnumS2CErrCode(9) -> 'E_S2CErrCode_ProtoErr';
d_enum_EnumS2CErrCode(11) -> 'E_S2CErrCode_BeKicked';
d_enum_EnumS2CErrCode(12) ->
    'E_S2CErrCode_Gs_Maintenance';
d_enum_EnumS2CErrCode(100) ->
    'E_S2CErrCode_NotEnoughMoney';
d_enum_EnumS2CErrCode(101) ->
    'E_S2CErrCode_RoomNotExist';
d_enum_EnumS2CErrCode(102) -> 'E_S2CErrCode_NotInRoom';
d_enum_EnumS2CErrCode(103) -> 'E_S2CErrCode_OutOfLimit';
d_enum_EnumS2CErrCode(104) -> 'E_S2CErrCode_CanNotBet';
d_enum_EnumS2CErrCode(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Person' -> merge_msg_Person(Prev, New, TrUserData);
      'Struct_Num' ->
	  merge_msg_Struct_Num(Prev, New, TrUserData);
      'C2S_Heartbeat' ->
	  merge_msg_C2S_Heartbeat(Prev, New, TrUserData);
      'S2C_Heartbeat' ->
	  merge_msg_S2C_Heartbeat(Prev, New, TrUserData);
      'C2S_Register' ->
	  merge_msg_C2S_Register(Prev, New, TrUserData);
      'S2C_Register' ->
	  merge_msg_S2C_Register(Prev, New, TrUserData);
      'C2S_Login' ->
	  merge_msg_C2S_Login(Prev, New, TrUserData);
      'S2C_Login' ->
	  merge_msg_S2C_Login(Prev, New, TrUserData);
      'S2C_Err' -> merge_msg_S2C_Err(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_Person/3}).
merge_msg_Person(#'Person'{nums = PFnums,
			   email = PFemail},
		 #'Person'{name = NFname, id = NFid, nums = NFnums,
			   email = NFemail},
		 TrUserData) ->
    #'Person'{name = NFname, id = NFid,
	      nums =
		  if PFnums /= undefined, NFnums /= undefined ->
			 'erlang_++'(PFnums, NFnums, TrUserData);
		     PFnums == undefined -> NFnums;
		     NFnums == undefined -> PFnums
		  end,
	      email =
		  if NFemail =:= undefined -> PFemail;
		     true -> NFemail
		  end}.

-compile({nowarn_unused_function,merge_msg_Struct_Num/3}).
merge_msg_Struct_Num(#'Struct_Num'{},
		     #'Struct_Num'{num = NFnum}, _) ->
    #'Struct_Num'{num = NFnum}.

-compile({nowarn_unused_function,merge_msg_C2S_Heartbeat/3}).
merge_msg_C2S_Heartbeat(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_S2C_Heartbeat/3}).
merge_msg_S2C_Heartbeat(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_C2S_Register/3}).
merge_msg_C2S_Register(#'C2S_Register'{},
		       #'C2S_Register'{use_name = NFuse_name,
				       password = NFpassword,
				       phone_number = NFphone_number},
		       _) ->
    #'C2S_Register'{use_name = NFuse_name,
		    password = NFpassword, phone_number = NFphone_number}.

-compile({nowarn_unused_function,merge_msg_S2C_Register/3}).
merge_msg_S2C_Register(#'S2C_Register'{},
		       #'S2C_Register'{code = NFcode}, _) ->
    #'S2C_Register'{code = NFcode}.

-compile({nowarn_unused_function,merge_msg_C2S_Login/3}).
merge_msg_C2S_Login(#'C2S_Login'{},
		    #'C2S_Login'{use_name = NFuse_name,
				 password = NFpassword},
		    _) ->
    #'C2S_Login'{use_name = NFuse_name,
		 password = NFpassword}.

-compile({nowarn_unused_function,merge_msg_S2C_Login/3}).
merge_msg_S2C_Login(#'S2C_Login'{},
		    #'S2C_Login'{use_name = NFuse_name, money = NFmoney},
		    _) ->
    #'S2C_Login'{use_name = NFuse_name, money = NFmoney}.

-compile({nowarn_unused_function,merge_msg_S2C_Err/3}).
merge_msg_S2C_Err(#'S2C_Err'{},
		  #'S2C_Err'{code = NFcode, msg = NFmsg}, _) ->
    #'S2C_Err'{code = NFcode, msg = NFmsg}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Person' -> v_msg_Person(Msg, [MsgName], TrUserData);
      'Struct_Num' ->
	  v_msg_Struct_Num(Msg, [MsgName], TrUserData);
      'C2S_Heartbeat' ->
	  v_msg_C2S_Heartbeat(Msg, [MsgName], TrUserData);
      'S2C_Heartbeat' ->
	  v_msg_S2C_Heartbeat(Msg, [MsgName], TrUserData);
      'C2S_Register' ->
	  v_msg_C2S_Register(Msg, [MsgName], TrUserData);
      'S2C_Register' ->
	  v_msg_S2C_Register(Msg, [MsgName], TrUserData);
      'C2S_Login' ->
	  v_msg_C2S_Login(Msg, [MsgName], TrUserData);
      'S2C_Login' ->
	  v_msg_S2C_Login(Msg, [MsgName], TrUserData);
      'S2C_Err' -> v_msg_S2C_Err(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_Person/3}).
-dialyzer({nowarn_function,v_msg_Person/3}).
v_msg_Person(#'Person'{name = F1, id = F2, nums = F3,
		       email = F4},
	     Path, TrUserData) ->
    v_type_string(F1, [name | Path], TrUserData),
    v_type_int32(F2, [id | Path], TrUserData),
    if is_list(F3) ->
	   _ = [v_msg_Struct_Num(Elem, [nums | Path], TrUserData)
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Struct_Num'}},
			 F3, [nums | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [email | Path], TrUserData)
    end,
    ok;
v_msg_Person(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Person'}, X, Path).

-compile({nowarn_unused_function,v_msg_Struct_Num/3}).
-dialyzer({nowarn_function,v_msg_Struct_Num/3}).
v_msg_Struct_Num(#'Struct_Num'{num = F1}, Path,
		 TrUserData) ->
    v_type_uint32(F1, [num | Path], TrUserData), ok;
v_msg_Struct_Num(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Struct_Num'}, X, Path).

-compile({nowarn_unused_function,v_msg_C2S_Heartbeat/3}).
-dialyzer({nowarn_function,v_msg_C2S_Heartbeat/3}).
v_msg_C2S_Heartbeat(#'C2S_Heartbeat'{}, _Path, _) -> ok;
v_msg_C2S_Heartbeat(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'C2S_Heartbeat'}, X, Path).

-compile({nowarn_unused_function,v_msg_S2C_Heartbeat/3}).
-dialyzer({nowarn_function,v_msg_S2C_Heartbeat/3}).
v_msg_S2C_Heartbeat(#'S2C_Heartbeat'{}, _Path, _) -> ok;
v_msg_S2C_Heartbeat(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'S2C_Heartbeat'}, X, Path).

-compile({nowarn_unused_function,v_msg_C2S_Register/3}).
-dialyzer({nowarn_function,v_msg_C2S_Register/3}).
v_msg_C2S_Register(#'C2S_Register'{use_name = F1,
				   password = F2, phone_number = F3},
		   Path, TrUserData) ->
    v_type_string(F1, [use_name | Path], TrUserData),
    v_type_string(F2, [password | Path], TrUserData),
    v_type_string(F3, [phone_number | Path], TrUserData),
    ok;
v_msg_C2S_Register(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'C2S_Register'}, X, Path).

-compile({nowarn_unused_function,v_msg_S2C_Register/3}).
-dialyzer({nowarn_function,v_msg_S2C_Register/3}).
v_msg_S2C_Register(#'S2C_Register'{code = F1}, Path,
		   TrUserData) ->
    v_type_uint32(F1, [code | Path], TrUserData), ok;
v_msg_S2C_Register(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'S2C_Register'}, X, Path).

-compile({nowarn_unused_function,v_msg_C2S_Login/3}).
-dialyzer({nowarn_function,v_msg_C2S_Login/3}).
v_msg_C2S_Login(#'C2S_Login'{use_name = F1,
			     password = F2},
		Path, TrUserData) ->
    v_type_string(F1, [use_name | Path], TrUserData),
    v_type_string(F2, [password | Path], TrUserData),
    ok;
v_msg_C2S_Login(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'C2S_Login'}, X, Path).

-compile({nowarn_unused_function,v_msg_S2C_Login/3}).
-dialyzer({nowarn_function,v_msg_S2C_Login/3}).
v_msg_S2C_Login(#'S2C_Login'{use_name = F1, money = F2},
		Path, TrUserData) ->
    v_type_string(F1, [use_name | Path], TrUserData),
    v_type_uint64(F2, [money | Path], TrUserData),
    ok;
v_msg_S2C_Login(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'S2C_Login'}, X, Path).

-compile({nowarn_unused_function,v_msg_S2C_Err/3}).
-dialyzer({nowarn_function,v_msg_S2C_Err/3}).
v_msg_S2C_Err(#'S2C_Err'{code = F1, msg = F2}, Path,
	      TrUserData) ->
    v_enum_EnumS2CErrCode(F1, [code | Path], TrUserData),
    v_type_string(F2, [msg | Path], TrUserData),
    ok;
v_msg_S2C_Err(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'S2C_Err'}, X, Path).

-compile({nowarn_unused_function,v_enum_EnumS2CErrCode/3}).
-dialyzer({nowarn_function,v_enum_EnumS2CErrCode/3}).
v_enum_EnumS2CErrCode('E_S2CErrCode_Succ', _Path,
		      _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_Sys', _Path,
		      _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_Busy', _Path,
		      _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_OpToFrequency',
		      _Path, _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_ReLogin', _Path,
		      _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_NotLogin', _Path,
		      _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_LoginCheckTimeout',
		      _Path, _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_LoginCheckNotThrough',
		      _Path, _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_ErrArgs', _Path,
		      _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_ProtoErr', _Path,
		      _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_BeKicked', _Path,
		      _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_Gs_Maintenance',
		      _Path, _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_NotEnoughMoney',
		      _Path, _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_RoomNotExist',
		      _Path, _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_NotInRoom', _Path,
		      _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_OutOfLimit', _Path,
		      _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_CanNotBet', _Path,
		      _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
v_enum_EnumS2CErrCode(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'EnumS2CErrCode'}, X,
		  Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData)
    when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{enum, 'EnumS2CErrShowType'},
      [{'E_S2CErrShowType_PopUp', 0}]},
     {{enum, 'EnumS2CErrCode'},
      [{'E_S2CErrCode_Succ', 0}, {'E_S2CErrCode_Sys', 1},
       {'E_S2CErrCode_Busy', 2},
       {'E_S2CErrCode_OpToFrequency', 3},
       {'E_S2CErrCode_ReLogin', 4},
       {'E_S2CErrCode_NotLogin', 5},
       {'E_S2CErrCode_LoginCheckTimeout', 6},
       {'E_S2CErrCode_LoginCheckNotThrough', 7},
       {'E_S2CErrCode_ErrArgs', 8},
       {'E_S2CErrCode_ProtoErr', 9},
       {'E_S2CErrCode_BeKicked', 11},
       {'E_S2CErrCode_Gs_Maintenance', 12},
       {'E_S2CErrCode_NotEnoughMoney', 100},
       {'E_S2CErrCode_RoomNotExist', 101},
       {'E_S2CErrCode_NotInRoom', 102},
       {'E_S2CErrCode_OutOfLimit', 103},
       {'E_S2CErrCode_CanNotBet', 104}]},
     {{msg, 'Person'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = id, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = nums, fnum = 3, rnum = 4,
	      type = {msg, 'Struct_Num'}, occurrence = repeated,
	      opts = []},
       #field{name = email, fnum = 4, rnum = 5, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'Struct_Num'},
      [#field{name = num, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, 'C2S_Heartbeat'}, []},
     {{msg, 'S2C_Heartbeat'}, []},
     {{msg, 'C2S_Register'},
      [#field{name = use_name, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = password, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = phone_number, fnum = 3, rnum = 4,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'S2C_Register'},
      [#field{name = code, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, 'C2S_Login'},
      [#field{name = use_name, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = password, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'S2C_Login'},
      [#field{name = use_name, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = money, fnum = 2, rnum = 3, type = uint64,
	      occurrence = required, opts = []}]},
     {{msg, 'S2C_Err'},
      [#field{name = code, fnum = 1, rnum = 2,
	      type = {enum, 'EnumS2CErrCode'}, occurrence = required,
	      opts = []},
       #field{name = msg, fnum = 3, rnum = 3, type = string,
	      occurrence = required, opts = []}]}].


get_msg_names() ->
    ['Person', 'Struct_Num', 'C2S_Heartbeat',
     'S2C_Heartbeat', 'C2S_Register', 'S2C_Register',
     'C2S_Login', 'S2C_Login', 'S2C_Err'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['Person', 'Struct_Num', 'C2S_Heartbeat',
     'S2C_Heartbeat', 'C2S_Register', 'S2C_Register',
     'C2S_Login', 'S2C_Login', 'S2C_Err'].


get_enum_names() ->
    ['EnumS2CErrShowType', 'EnumS2CErrCode'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('Person') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = id, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = nums, fnum = 3, rnum = 4,
	    type = {msg, 'Struct_Num'}, occurrence = repeated,
	    opts = []},
     #field{name = email, fnum = 4, rnum = 5, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('Struct_Num') ->
    [#field{name = num, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def('C2S_Heartbeat') -> [];
find_msg_def('S2C_Heartbeat') -> [];
find_msg_def('C2S_Register') ->
    [#field{name = use_name, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = password, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = phone_number, fnum = 3, rnum = 4,
	    type = string, occurrence = required, opts = []}];
find_msg_def('S2C_Register') ->
    [#field{name = code, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def('C2S_Login') ->
    [#field{name = use_name, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = password, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []}];
find_msg_def('S2C_Login') ->
    [#field{name = use_name, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = money, fnum = 2, rnum = 3, type = uint64,
	    occurrence = required, opts = []}];
find_msg_def('S2C_Err') ->
    [#field{name = code, fnum = 1, rnum = 2,
	    type = {enum, 'EnumS2CErrCode'}, occurrence = required,
	    opts = []},
     #field{name = msg, fnum = 3, rnum = 3, type = string,
	    occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def('EnumS2CErrShowType') ->
    [{'E_S2CErrShowType_PopUp', 0}];
find_enum_def('EnumS2CErrCode') ->
    [{'E_S2CErrCode_Succ', 0}, {'E_S2CErrCode_Sys', 1},
     {'E_S2CErrCode_Busy', 2},
     {'E_S2CErrCode_OpToFrequency', 3},
     {'E_S2CErrCode_ReLogin', 4},
     {'E_S2CErrCode_NotLogin', 5},
     {'E_S2CErrCode_LoginCheckTimeout', 6},
     {'E_S2CErrCode_LoginCheckNotThrough', 7},
     {'E_S2CErrCode_ErrArgs', 8},
     {'E_S2CErrCode_ProtoErr', 9},
     {'E_S2CErrCode_BeKicked', 11},
     {'E_S2CErrCode_Gs_Maintenance', 12},
     {'E_S2CErrCode_NotEnoughMoney', 100},
     {'E_S2CErrCode_RoomNotExist', 101},
     {'E_S2CErrCode_NotInRoom', 102},
     {'E_S2CErrCode_OutOfLimit', 103},
     {'E_S2CErrCode_CanNotBet', 104}];
find_enum_def(_) -> error.


enum_symbol_by_value('EnumS2CErrShowType', Value) ->
    enum_symbol_by_value_EnumS2CErrShowType(Value);
enum_symbol_by_value('EnumS2CErrCode', Value) ->
    enum_symbol_by_value_EnumS2CErrCode(Value).


enum_value_by_symbol('EnumS2CErrShowType', Sym) ->
    enum_value_by_symbol_EnumS2CErrShowType(Sym);
enum_value_by_symbol('EnumS2CErrCode', Sym) ->
    enum_value_by_symbol_EnumS2CErrCode(Sym).


enum_symbol_by_value_EnumS2CErrShowType(0) ->
    'E_S2CErrShowType_PopUp'.


enum_value_by_symbol_EnumS2CErrShowType('E_S2CErrShowType_PopUp') ->
    0.

enum_symbol_by_value_EnumS2CErrCode(0) ->
    'E_S2CErrCode_Succ';
enum_symbol_by_value_EnumS2CErrCode(1) ->
    'E_S2CErrCode_Sys';
enum_symbol_by_value_EnumS2CErrCode(2) ->
    'E_S2CErrCode_Busy';
enum_symbol_by_value_EnumS2CErrCode(3) ->
    'E_S2CErrCode_OpToFrequency';
enum_symbol_by_value_EnumS2CErrCode(4) ->
    'E_S2CErrCode_ReLogin';
enum_symbol_by_value_EnumS2CErrCode(5) ->
    'E_S2CErrCode_NotLogin';
enum_symbol_by_value_EnumS2CErrCode(6) ->
    'E_S2CErrCode_LoginCheckTimeout';
enum_symbol_by_value_EnumS2CErrCode(7) ->
    'E_S2CErrCode_LoginCheckNotThrough';
enum_symbol_by_value_EnumS2CErrCode(8) ->
    'E_S2CErrCode_ErrArgs';
enum_symbol_by_value_EnumS2CErrCode(9) ->
    'E_S2CErrCode_ProtoErr';
enum_symbol_by_value_EnumS2CErrCode(11) ->
    'E_S2CErrCode_BeKicked';
enum_symbol_by_value_EnumS2CErrCode(12) ->
    'E_S2CErrCode_Gs_Maintenance';
enum_symbol_by_value_EnumS2CErrCode(100) ->
    'E_S2CErrCode_NotEnoughMoney';
enum_symbol_by_value_EnumS2CErrCode(101) ->
    'E_S2CErrCode_RoomNotExist';
enum_symbol_by_value_EnumS2CErrCode(102) ->
    'E_S2CErrCode_NotInRoom';
enum_symbol_by_value_EnumS2CErrCode(103) ->
    'E_S2CErrCode_OutOfLimit';
enum_symbol_by_value_EnumS2CErrCode(104) ->
    'E_S2CErrCode_CanNotBet'.


enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_Succ') ->
    0;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_Sys') ->
    1;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_Busy') ->
    2;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_OpToFrequency') ->
    3;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_ReLogin') ->
    4;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_NotLogin') ->
    5;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_LoginCheckTimeout') ->
    6;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_LoginCheckNotThrough') ->
    7;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_ErrArgs') ->
    8;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_ProtoErr') ->
    9;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_BeKicked') ->
    11;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_Gs_Maintenance') ->
    12;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_NotEnoughMoney') ->
    100;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_RoomNotExist') ->
    101;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_NotInRoom') ->
    102;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_OutOfLimit') ->
    103;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_CanNotBet') ->
    104.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified

%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "all_pb.proto".


descriptor() ->
    <<10, 190, 7, 34, 75, 10, 6, 80, 101, 114, 115, 111,
      110, 18, 12, 10, 4, 110, 97, 109, 101, 24, 1, 32, 2, 40,
      9, 18, 10, 10, 2, 105, 100, 24, 2, 32, 2, 40, 5, 18, 24,
      10, 4, 110, 117, 109, 115, 24, 3, 32, 3, 40, 11, 50, 10,
      83, 116, 114, 117, 99, 116, 95, 78, 117, 109, 18, 13,
      10, 5, 101, 109, 97, 105, 108, 24, 4, 32, 1, 40, 9, 34,
      25, 10, 10, 83, 116, 114, 117, 99, 116, 95, 78, 117,
      109, 18, 11, 10, 3, 110, 117, 109, 24, 1, 32, 2, 40, 13,
      34, 15, 10, 13, 67, 50, 83, 95, 72, 101, 97, 114, 116,
      98, 101, 97, 116, 34, 15, 10, 13, 83, 50, 67, 95, 72,
      101, 97, 114, 116, 98, 101, 97, 116, 34, 72, 10, 12, 67,
      50, 83, 95, 82, 101, 103, 105, 115, 116, 101, 114, 18,
      16, 10, 8, 117, 115, 101, 95, 110, 97, 109, 101, 24, 1,
      32, 2, 40, 9, 18, 16, 10, 8, 112, 97, 115, 115, 119,
      111, 114, 100, 24, 2, 32, 2, 40, 9, 18, 20, 10, 12, 112,
      104, 111, 110, 101, 95, 110, 117, 109, 98, 101, 114, 24,
      3, 32, 2, 40, 9, 34, 28, 10, 12, 83, 50, 67, 95, 82,
      101, 103, 105, 115, 116, 101, 114, 18, 12, 10, 4, 99,
      111, 100, 101, 24, 1, 32, 2, 40, 13, 34, 47, 10, 9, 67,
      50, 83, 95, 76, 111, 103, 105, 110, 18, 16, 10, 8, 117,
      115, 101, 95, 110, 97, 109, 101, 24, 1, 32, 2, 40, 9,
      18, 16, 10, 8, 112, 97, 115, 115, 119, 111, 114, 100,
      24, 2, 32, 2, 40, 9, 34, 44, 10, 9, 83, 50, 67, 95, 76,
      111, 103, 105, 110, 18, 16, 10, 8, 117, 115, 101, 95,
      110, 97, 109, 101, 24, 1, 32, 2, 40, 9, 18, 13, 10, 5,
      109, 111, 110, 101, 121, 24, 2, 32, 2, 40, 4, 34, 52,
      10, 7, 83, 50, 67, 95, 69, 114, 114, 18, 28, 10, 4, 99,
      111, 100, 101, 24, 1, 32, 2, 40, 14, 50, 14, 69, 110,
      117, 109, 83, 50, 67, 69, 114, 114, 67, 111, 100, 101,
      18, 11, 10, 3, 109, 115, 103, 24, 3, 32, 2, 40, 9, 42,
      48, 10, 18, 69, 110, 117, 109, 83, 50, 67, 69, 114, 114,
      83, 104, 111, 119, 84, 121, 112, 101, 18, 26, 10, 22,
      69, 95, 83, 50, 67, 69, 114, 114, 83, 104, 111, 119, 84,
      121, 112, 101, 95, 80, 111, 112, 85, 112, 16, 0, 42,
      250, 3, 10, 14, 69, 110, 117, 109, 83, 50, 67, 69, 114,
      114, 67, 111, 100, 101, 18, 21, 10, 17, 69, 95, 83, 50,
      67, 69, 114, 114, 67, 111, 100, 101, 95, 83, 117, 99,
      99, 16, 0, 18, 20, 10, 16, 69, 95, 83, 50, 67, 69, 114,
      114, 67, 111, 100, 101, 95, 83, 121, 115, 16, 1, 18, 21,
      10, 17, 69, 95, 83, 50, 67, 69, 114, 114, 67, 111, 100,
      101, 95, 66, 117, 115, 121, 16, 2, 18, 30, 10, 26, 69,
      95, 83, 50, 67, 69, 114, 114, 67, 111, 100, 101, 95, 79,
      112, 84, 111, 70, 114, 101, 113, 117, 101, 110, 99, 121,
      16, 3, 18, 24, 10, 20, 69, 95, 83, 50, 67, 69, 114, 114,
      67, 111, 100, 101, 95, 82, 101, 76, 111, 103, 105, 110,
      16, 4, 18, 25, 10, 21, 69, 95, 83, 50, 67, 69, 114, 114,
      67, 111, 100, 101, 95, 78, 111, 116, 76, 111, 103, 105,
      110, 16, 5, 18, 34, 10, 30, 69, 95, 83, 50, 67, 69, 114,
      114, 67, 111, 100, 101, 95, 76, 111, 103, 105, 110, 67,
      104, 101, 99, 107, 84, 105, 109, 101, 111, 117, 116, 16,
      6, 18, 37, 10, 33, 69, 95, 83, 50, 67, 69, 114, 114, 67,
      111, 100, 101, 95, 76, 111, 103, 105, 110, 67, 104, 101,
      99, 107, 78, 111, 116, 84, 104, 114, 111, 117, 103, 104,
      16, 7, 18, 24, 10, 20, 69, 95, 83, 50, 67, 69, 114, 114,
      67, 111, 100, 101, 95, 69, 114, 114, 65, 114, 103, 115,
      16, 8, 18, 25, 10, 21, 69, 95, 83, 50, 67, 69, 114, 114,
      67, 111, 100, 101, 95, 80, 114, 111, 116, 111, 69, 114,
      114, 16, 9, 18, 25, 10, 21, 69, 95, 83, 50, 67, 69, 114,
      114, 67, 111, 100, 101, 95, 66, 101, 75, 105, 99, 107,
      101, 100, 16, 11, 18, 31, 10, 27, 69, 95, 83, 50, 67,
      69, 114, 114, 67, 111, 100, 101, 95, 71, 115, 95, 77,
      97, 105, 110, 116, 101, 110, 97, 110, 99, 101, 16, 12,
      18, 31, 10, 27, 69, 95, 83, 50, 67, 69, 114, 114, 67,
      111, 100, 101, 95, 78, 111, 116, 69, 110, 111, 117, 103,
      104, 77, 111, 110, 101, 121, 16, 100, 18, 29, 10, 25,
      69, 95, 83, 50, 67, 69, 114, 114, 67, 111, 100, 101, 95,
      82, 111, 111, 109, 78, 111, 116, 69, 120, 105, 115, 116,
      16, 101, 18, 26, 10, 22, 69, 95, 83, 50, 67, 69, 114,
      114, 67, 111, 100, 101, 95, 78, 111, 116, 73, 110, 82,
      111, 111, 109, 16, 102, 18, 27, 10, 23, 69, 95, 83, 50,
      67, 69, 114, 114, 67, 111, 100, 101, 95, 79, 117, 116,
      79, 102, 76, 105, 109, 105, 116, 16, 103, 18, 26, 10,
      22, 69, 95, 83, 50, 67, 69, 114, 114, 67, 111, 100, 101,
      95, 67, 97, 110, 78, 111, 116, 66, 101, 116, 16, 104,
      98, 6, 112, 114, 111, 116, 111, 50>>.


gpb_version_as_string() ->
    "4.6.0".

gpb_version_as_list() ->
    [4,6,0].
